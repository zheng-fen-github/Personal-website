{"pageProps":{"book":[{"BookMessage":[{"pageTitle":"JSX","pageContent":[{"pieceTitle":"JSX","pieceMessage":["是一个 JavaScript 的语法扩展。我们建议在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模版语言，但它具有 JavaScript 的全部功能。"]},{"pieceTitle":"在JSX 中嵌入表达式","pieceMessage":["const name = 'Josh Perez';const element = <h1>Hello, {name}</h1>;  声明了一个名为 name 的变量，然后在 JSX 中使用它，并将它包裹在大括号中。可以在大括号内放置任何有效的 JavaScript 表达式。例如，2 + 2，user.firstName 或 formatName(user) 都是有效的 JavaScript 表达式。"]},{"pieceTitle":"JSX 表示对象","pieceMessage":["Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);"]}],"createTime":1586097219517},{"pageTitle":"元素渲染","pageContent":[{"pieceTitle":"元素","pieceMessage":["构成 React 应用的最小砖块。\n元素描述了你在屏幕上想看到的内容。"]},{"pieceTitle":"更新已渲染的元素","pieceMessage":["React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。","React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。"]}],"createTime":1586097460098}],"_id":"5e89eb6b00d8364dc8cf97d3","BookTitle":"概念","__v":0}]},"__N_SSG":true}